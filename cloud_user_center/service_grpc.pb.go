// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: service.proto

package cloud_user_center

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// 创建用户
	UserInfoCreate(ctx context.Context, in *UserInfoCreateRequest, opts ...grpc.CallOption) (*UserInfoCreateResponse, error)
	// 登录校验
	UserInfoAuth(ctx context.Context, in *UserInfoAuthRequest, opts ...grpc.CallOption) (*UserInfoAuthResponse, error)
	// 更新用户信息
	UserInfoUpdate(ctx context.Context, in *UserInfoUpdateRequest, opts ...grpc.CallOption) (*UserInfoUpdateResponse, error)
	// 删除用户
	UserInfoDelete(ctx context.Context, in *UserInfoDeleteRequest, opts ...grpc.CallOption) (*UserInfoDeleteResponse, error)
	// 获取用户信息
	UserInfoGet(ctx context.Context, in *UserInfoGetRequest, opts ...grpc.CallOption) (*UserInfoGetResponse, error)
	// 批量获取用户信息
	MUserInfoGet(ctx context.Context, in *MUserInfoGetRequest, opts ...grpc.CallOption) (*MUserInfoGetResponse, error)
	// 搜索用户信息
	UserInfoSearch(ctx context.Context, in *UserInfoSearchRequest, opts ...grpc.CallOption) (*UserInfoSearchResponse, error)
	// 创建用户消息
	UserMessageCreate(ctx context.Context, in *UserMessageCreateRequest, opts ...grpc.CallOption) (*UserMessageCreateResponse, error)
	// 批量创建用户消息
	MUserMessageCreate(ctx context.Context, in *MUserMessageCreateRequest, opts ...grpc.CallOption) (*MUserMessageCreateResponse, error)
	// 用户消息获取
	UserMessageGet(ctx context.Context, in *UserMessageGetRequest, opts ...grpc.CallOption) (*UserMessageGetResponse, error)
	// 用户消息更新
	UserMessageUpdate(ctx context.Context, in *UserMessageUpdateRequest, opts ...grpc.CallOption) (*UserMessageUpdateResponse, error)
	// 用户消息删除
	UserMessageDelete(ctx context.Context, in *UserMessageDeleteRequest, opts ...grpc.CallOption) (*UserMessageDeleteResponse, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/cloud_user_center.Greeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) UserInfoCreate(ctx context.Context, in *UserInfoCreateRequest, opts ...grpc.CallOption) (*UserInfoCreateResponse, error) {
	out := new(UserInfoCreateResponse)
	err := c.cc.Invoke(ctx, "/cloud_user_center.Greeter/UserInfoCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) UserInfoAuth(ctx context.Context, in *UserInfoAuthRequest, opts ...grpc.CallOption) (*UserInfoAuthResponse, error) {
	out := new(UserInfoAuthResponse)
	err := c.cc.Invoke(ctx, "/cloud_user_center.Greeter/UserInfoAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) UserInfoUpdate(ctx context.Context, in *UserInfoUpdateRequest, opts ...grpc.CallOption) (*UserInfoUpdateResponse, error) {
	out := new(UserInfoUpdateResponse)
	err := c.cc.Invoke(ctx, "/cloud_user_center.Greeter/UserInfoUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) UserInfoDelete(ctx context.Context, in *UserInfoDeleteRequest, opts ...grpc.CallOption) (*UserInfoDeleteResponse, error) {
	out := new(UserInfoDeleteResponse)
	err := c.cc.Invoke(ctx, "/cloud_user_center.Greeter/UserInfoDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) UserInfoGet(ctx context.Context, in *UserInfoGetRequest, opts ...grpc.CallOption) (*UserInfoGetResponse, error) {
	out := new(UserInfoGetResponse)
	err := c.cc.Invoke(ctx, "/cloud_user_center.Greeter/UserInfoGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) MUserInfoGet(ctx context.Context, in *MUserInfoGetRequest, opts ...grpc.CallOption) (*MUserInfoGetResponse, error) {
	out := new(MUserInfoGetResponse)
	err := c.cc.Invoke(ctx, "/cloud_user_center.Greeter/MUserInfoGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) UserInfoSearch(ctx context.Context, in *UserInfoSearchRequest, opts ...grpc.CallOption) (*UserInfoSearchResponse, error) {
	out := new(UserInfoSearchResponse)
	err := c.cc.Invoke(ctx, "/cloud_user_center.Greeter/UserInfoSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) UserMessageCreate(ctx context.Context, in *UserMessageCreateRequest, opts ...grpc.CallOption) (*UserMessageCreateResponse, error) {
	out := new(UserMessageCreateResponse)
	err := c.cc.Invoke(ctx, "/cloud_user_center.Greeter/UserMessageCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) MUserMessageCreate(ctx context.Context, in *MUserMessageCreateRequest, opts ...grpc.CallOption) (*MUserMessageCreateResponse, error) {
	out := new(MUserMessageCreateResponse)
	err := c.cc.Invoke(ctx, "/cloud_user_center.Greeter/MUserMessageCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) UserMessageGet(ctx context.Context, in *UserMessageGetRequest, opts ...grpc.CallOption) (*UserMessageGetResponse, error) {
	out := new(UserMessageGetResponse)
	err := c.cc.Invoke(ctx, "/cloud_user_center.Greeter/UserMessageGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) UserMessageUpdate(ctx context.Context, in *UserMessageUpdateRequest, opts ...grpc.CallOption) (*UserMessageUpdateResponse, error) {
	out := new(UserMessageUpdateResponse)
	err := c.cc.Invoke(ctx, "/cloud_user_center.Greeter/UserMessageUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) UserMessageDelete(ctx context.Context, in *UserMessageDeleteRequest, opts ...grpc.CallOption) (*UserMessageDeleteResponse, error) {
	out := new(UserMessageDeleteResponse)
	err := c.cc.Invoke(ctx, "/cloud_user_center.Greeter/UserMessageDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// 创建用户
	UserInfoCreate(context.Context, *UserInfoCreateRequest) (*UserInfoCreateResponse, error)
	// 登录校验
	UserInfoAuth(context.Context, *UserInfoAuthRequest) (*UserInfoAuthResponse, error)
	// 更新用户信息
	UserInfoUpdate(context.Context, *UserInfoUpdateRequest) (*UserInfoUpdateResponse, error)
	// 删除用户
	UserInfoDelete(context.Context, *UserInfoDeleteRequest) (*UserInfoDeleteResponse, error)
	// 获取用户信息
	UserInfoGet(context.Context, *UserInfoGetRequest) (*UserInfoGetResponse, error)
	// 批量获取用户信息
	MUserInfoGet(context.Context, *MUserInfoGetRequest) (*MUserInfoGetResponse, error)
	// 搜索用户信息
	UserInfoSearch(context.Context, *UserInfoSearchRequest) (*UserInfoSearchResponse, error)
	// 创建用户消息
	UserMessageCreate(context.Context, *UserMessageCreateRequest) (*UserMessageCreateResponse, error)
	// 批量创建用户消息
	MUserMessageCreate(context.Context, *MUserMessageCreateRequest) (*MUserMessageCreateResponse, error)
	// 用户消息获取
	UserMessageGet(context.Context, *UserMessageGetRequest) (*UserMessageGetResponse, error)
	// 用户消息更新
	UserMessageUpdate(context.Context, *UserMessageUpdateRequest) (*UserMessageUpdateResponse, error)
	// 用户消息删除
	UserMessageDelete(context.Context, *UserMessageDeleteRequest) (*UserMessageDeleteResponse, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) UserInfoCreate(context.Context, *UserInfoCreateRequest) (*UserInfoCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfoCreate not implemented")
}
func (UnimplementedGreeterServer) UserInfoAuth(context.Context, *UserInfoAuthRequest) (*UserInfoAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfoAuth not implemented")
}
func (UnimplementedGreeterServer) UserInfoUpdate(context.Context, *UserInfoUpdateRequest) (*UserInfoUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfoUpdate not implemented")
}
func (UnimplementedGreeterServer) UserInfoDelete(context.Context, *UserInfoDeleteRequest) (*UserInfoDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfoDelete not implemented")
}
func (UnimplementedGreeterServer) UserInfoGet(context.Context, *UserInfoGetRequest) (*UserInfoGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfoGet not implemented")
}
func (UnimplementedGreeterServer) MUserInfoGet(context.Context, *MUserInfoGetRequest) (*MUserInfoGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MUserInfoGet not implemented")
}
func (UnimplementedGreeterServer) UserInfoSearch(context.Context, *UserInfoSearchRequest) (*UserInfoSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfoSearch not implemented")
}
func (UnimplementedGreeterServer) UserMessageCreate(context.Context, *UserMessageCreateRequest) (*UserMessageCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMessageCreate not implemented")
}
func (UnimplementedGreeterServer) MUserMessageCreate(context.Context, *MUserMessageCreateRequest) (*MUserMessageCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MUserMessageCreate not implemented")
}
func (UnimplementedGreeterServer) UserMessageGet(context.Context, *UserMessageGetRequest) (*UserMessageGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMessageGet not implemented")
}
func (UnimplementedGreeterServer) UserMessageUpdate(context.Context, *UserMessageUpdateRequest) (*UserMessageUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMessageUpdate not implemented")
}
func (UnimplementedGreeterServer) UserMessageDelete(context.Context, *UserMessageDeleteRequest) (*UserMessageDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMessageDelete not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_user_center.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_UserInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).UserInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_user_center.Greeter/UserInfoCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).UserInfoCreate(ctx, req.(*UserInfoCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_UserInfoAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).UserInfoAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_user_center.Greeter/UserInfoAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).UserInfoAuth(ctx, req.(*UserInfoAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_UserInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).UserInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_user_center.Greeter/UserInfoUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).UserInfoUpdate(ctx, req.(*UserInfoUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_UserInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).UserInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_user_center.Greeter/UserInfoDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).UserInfoDelete(ctx, req.(*UserInfoDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_UserInfoGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).UserInfoGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_user_center.Greeter/UserInfoGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).UserInfoGet(ctx, req.(*UserInfoGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_MUserInfoGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MUserInfoGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).MUserInfoGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_user_center.Greeter/MUserInfoGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).MUserInfoGet(ctx, req.(*MUserInfoGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_UserInfoSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).UserInfoSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_user_center.Greeter/UserInfoSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).UserInfoSearch(ctx, req.(*UserInfoSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_UserMessageCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMessageCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).UserMessageCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_user_center.Greeter/UserMessageCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).UserMessageCreate(ctx, req.(*UserMessageCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_MUserMessageCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MUserMessageCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).MUserMessageCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_user_center.Greeter/MUserMessageCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).MUserMessageCreate(ctx, req.(*MUserMessageCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_UserMessageGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMessageGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).UserMessageGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_user_center.Greeter/UserMessageGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).UserMessageGet(ctx, req.(*UserMessageGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_UserMessageUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMessageUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).UserMessageUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_user_center.Greeter/UserMessageUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).UserMessageUpdate(ctx, req.(*UserMessageUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_UserMessageDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMessageDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).UserMessageDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud_user_center.Greeter/UserMessageDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).UserMessageDelete(ctx, req.(*UserMessageDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud_user_center.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
		{
			MethodName: "UserInfoCreate",
			Handler:    _Greeter_UserInfoCreate_Handler,
		},
		{
			MethodName: "UserInfoAuth",
			Handler:    _Greeter_UserInfoAuth_Handler,
		},
		{
			MethodName: "UserInfoUpdate",
			Handler:    _Greeter_UserInfoUpdate_Handler,
		},
		{
			MethodName: "UserInfoDelete",
			Handler:    _Greeter_UserInfoDelete_Handler,
		},
		{
			MethodName: "UserInfoGet",
			Handler:    _Greeter_UserInfoGet_Handler,
		},
		{
			MethodName: "MUserInfoGet",
			Handler:    _Greeter_MUserInfoGet_Handler,
		},
		{
			MethodName: "UserInfoSearch",
			Handler:    _Greeter_UserInfoSearch_Handler,
		},
		{
			MethodName: "UserMessageCreate",
			Handler:    _Greeter_UserMessageCreate_Handler,
		},
		{
			MethodName: "MUserMessageCreate",
			Handler:    _Greeter_MUserMessageCreate_Handler,
		},
		{
			MethodName: "UserMessageGet",
			Handler:    _Greeter_UserMessageGet_Handler,
		},
		{
			MethodName: "UserMessageUpdate",
			Handler:    _Greeter_UserMessageUpdate_Handler,
		},
		{
			MethodName: "UserMessageDelete",
			Handler:    _Greeter_UserMessageDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
