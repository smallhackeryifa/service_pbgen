// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: model_base.proto

package model_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataSortType int32

const (
	DataSortType_sort_type_unknown       DataSortType = 0
	DataSortType_sort_create_time_latest DataSortType = 1 // 创建时间
	DataSortType_sort_update_time_latest DataSortType = 2 // 更新时间
	DataSortType_sort_share_time_latest  DataSortType = 3 // 分享时间
)

// Enum value maps for DataSortType.
var (
	DataSortType_name = map[int32]string{
		0: "sort_type_unknown",
		1: "sort_create_time_latest",
		2: "sort_update_time_latest",
		3: "sort_share_time_latest",
	}
	DataSortType_value = map[string]int32{
		"sort_type_unknown":       0,
		"sort_create_time_latest": 1,
		"sort_update_time_latest": 2,
		"sort_share_time_latest":  3,
	}
)

func (x DataSortType) Enum() *DataSortType {
	p := new(DataSortType)
	*p = x
	return p
}

func (x DataSortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSortType) Descriptor() protoreflect.EnumDescriptor {
	return file_model_base_proto_enumTypes[0].Descriptor()
}

func (DataSortType) Type() protoreflect.EnumType {
	return &file_model_base_proto_enumTypes[0]
}

func (x DataSortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSortType.Descriptor instead.
func (DataSortType) EnumDescriptor() ([]byte, []int) {
	return file_model_base_proto_rawDescGZIP(), []int{0}
}

type ModelCategory int32

const (
	ModelCategory_model_category_unknown   ModelCategory = 0
	ModelCategory_model_category_image_seg ModelCategory = 1 // 模型分割
)

// Enum value maps for ModelCategory.
var (
	ModelCategory_name = map[int32]string{
		0: "model_category_unknown",
		1: "model_category_image_seg",
	}
	ModelCategory_value = map[string]int32{
		"model_category_unknown":   0,
		"model_category_image_seg": 1,
	}
)

func (x ModelCategory) Enum() *ModelCategory {
	p := new(ModelCategory)
	*p = x
	return p
}

func (x ModelCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_model_base_proto_enumTypes[1].Descriptor()
}

func (ModelCategory) Type() protoreflect.EnumType {
	return &file_model_base_proto_enumTypes[1]
}

func (x ModelCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelCategory.Descriptor instead.
func (ModelCategory) EnumDescriptor() ([]byte, []int) {
	return file_model_base_proto_rawDescGZIP(), []int{1}
}

type ModelType int32

const (
	ModelType_model_type_unknown   ModelType = 0
	ModelType_model_type_unet      ModelType = 1
	ModelType_model_type_icnet     ModelType = 2
	ModelType_model_type_pspnet    ModelType = 3
	ModelType_model_type_hrnet     ModelType = 4
	ModelType_model_type_fast_scnn ModelType = 5
	ModelType_model_type_deeplabv3 ModelType = 6
)

// Enum value maps for ModelType.
var (
	ModelType_name = map[int32]string{
		0: "model_type_unknown",
		1: "model_type_unet",
		2: "model_type_icnet",
		3: "model_type_pspnet",
		4: "model_type_hrnet",
		5: "model_type_fast_scnn",
		6: "model_type_deeplabv3",
	}
	ModelType_value = map[string]int32{
		"model_type_unknown":   0,
		"model_type_unet":      1,
		"model_type_icnet":     2,
		"model_type_pspnet":    3,
		"model_type_hrnet":     4,
		"model_type_fast_scnn": 5,
		"model_type_deeplabv3": 6,
	}
)

func (x ModelType) Enum() *ModelType {
	p := new(ModelType)
	*p = x
	return p
}

func (x ModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_model_base_proto_enumTypes[2].Descriptor()
}

func (ModelType) Type() protoreflect.EnumType {
	return &file_model_base_proto_enumTypes[2]
}

func (x ModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelType.Descriptor instead.
func (ModelType) EnumDescriptor() ([]byte, []int) {
	return file_model_base_proto_rawDescGZIP(), []int{2}
}

type FileType int32

const (
	FileType_file_type_unknown FileType = 0
	FileType_file_type_dicom   FileType = 1 // dicom类型
	FileType_file_type_jpg     FileType = 2 // jpg图像类型
	FileType_file_type_png     FileType = 3 // png图像类型
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "file_type_unknown",
		1: "file_type_dicom",
		2: "file_type_jpg",
		3: "file_type_png",
	}
	FileType_value = map[string]int32{
		"file_type_unknown": 0,
		"file_type_dicom":   1,
		"file_type_jpg":     2,
		"file_type_png":     3,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_model_base_proto_enumTypes[3].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_model_base_proto_enumTypes[3]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_model_base_proto_rawDescGZIP(), []int{3}
}

// 损失函数
type LossFunction int32

const (
	LossFunction_loss_function_unknown LossFunction = 0
	LossFunction_loss_function_softmax LossFunction = 1
	LossFunction_loss_function_bce     LossFunction = 2
	LossFunction_loss_function_dice    LossFunction = 3
)

// Enum value maps for LossFunction.
var (
	LossFunction_name = map[int32]string{
		0: "loss_function_unknown",
		1: "loss_function_softmax",
		2: "loss_function_bce",
		3: "loss_function_dice",
	}
	LossFunction_value = map[string]int32{
		"loss_function_unknown": 0,
		"loss_function_softmax": 1,
		"loss_function_bce":     2,
		"loss_function_dice":    3,
	}
)

func (x LossFunction) Enum() *LossFunction {
	p := new(LossFunction)
	*p = x
	return p
}

func (x LossFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LossFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_model_base_proto_enumTypes[4].Descriptor()
}

func (LossFunction) Type() protoreflect.EnumType {
	return &file_model_base_proto_enumTypes[4]
}

func (x LossFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LossFunction.Descriptor instead.
func (LossFunction) EnumDescriptor() ([]byte, []int) {
	return file_model_base_proto_rawDescGZIP(), []int{4}
}

// 学习率下降方法
type LRPolicy int32

const (
	LRPolicy_lr_policy_unknown   LRPolicy = 0
	LRPolicy_lr_policy_poly      LRPolicy = 1
	LRPolicy_lr_policy_piecewise LRPolicy = 2
	LRPolicy_lr_policy_cosine    LRPolicy = 3
)

// Enum value maps for LRPolicy.
var (
	LRPolicy_name = map[int32]string{
		0: "lr_policy_unknown",
		1: "lr_policy_poly",
		2: "lr_policy_piecewise",
		3: "lr_policy_cosine",
	}
	LRPolicy_value = map[string]int32{
		"lr_policy_unknown":   0,
		"lr_policy_poly":      1,
		"lr_policy_piecewise": 2,
		"lr_policy_cosine":    3,
	}
)

func (x LRPolicy) Enum() *LRPolicy {
	p := new(LRPolicy)
	*p = x
	return p
}

func (x LRPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LRPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_model_base_proto_enumTypes[5].Descriptor()
}

func (LRPolicy) Type() protoreflect.EnumType {
	return &file_model_base_proto_enumTypes[5]
}

func (x LRPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LRPolicy.Descriptor instead.
func (LRPolicy) EnumDescriptor() ([]byte, []int) {
	return file_model_base_proto_rawDescGZIP(), []int{5}
}

// 优化算法
type Optimizer int32

const (
	Optimizer_optimizer_unknown Optimizer = 0
	Optimizer_optimizer_sgd     Optimizer = 1
	Optimizer_optimizer_adam    Optimizer = 2
)

// Enum value maps for Optimizer.
var (
	Optimizer_name = map[int32]string{
		0: "optimizer_unknown",
		1: "optimizer_sgd",
		2: "optimizer_adam",
	}
	Optimizer_value = map[string]int32{
		"optimizer_unknown": 0,
		"optimizer_sgd":     1,
		"optimizer_adam":    2,
	}
)

func (x Optimizer) Enum() *Optimizer {
	p := new(Optimizer)
	*p = x
	return p
}

func (x Optimizer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Optimizer) Descriptor() protoreflect.EnumDescriptor {
	return file_model_base_proto_enumTypes[6].Descriptor()
}

func (Optimizer) Type() protoreflect.EnumType {
	return &file_model_base_proto_enumTypes[6]
}

func (x Optimizer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Optimizer.Descriptor instead.
func (Optimizer) EnumDescriptor() ([]byte, []int) {
	return file_model_base_proto_rawDescGZIP(), []int{6}
}

// 图像resize的方式
type AugMethod int32

const (
	AugMethod_aug_method_unknown      AugMethod = 0
	AugMethod_aug_method_unpadding    AugMethod = 1
	AugMethod_aug_method_stepscaling  AugMethod = 2
	AugMethod_aug_method_rangescaling AugMethod = 3
)

// Enum value maps for AugMethod.
var (
	AugMethod_name = map[int32]string{
		0: "aug_method_unknown",
		1: "aug_method_unpadding",
		2: "aug_method_stepscaling",
		3: "aug_method_rangescaling",
	}
	AugMethod_value = map[string]int32{
		"aug_method_unknown":      0,
		"aug_method_unpadding":    1,
		"aug_method_stepscaling":  2,
		"aug_method_rangescaling": 3,
	}
)

func (x AugMethod) Enum() *AugMethod {
	p := new(AugMethod)
	*p = x
	return p
}

func (x AugMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AugMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_model_base_proto_enumTypes[7].Descriptor()
}

func (AugMethod) Type() protoreflect.EnumType {
	return &file_model_base_proto_enumTypes[7]
}

func (x AugMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AugMethod.Descriptor instead.
func (AugMethod) EnumDescriptor() ([]byte, []int) {
	return file_model_base_proto_rawDescGZIP(), []int{7}
}

// 模型状态
type ModelState int32

const (
	ModelState_model_state_unknown   ModelState = 0 // 未知，无效的状态
	ModelState_model_state_init      ModelState = 1 // 初始状态
	ModelState_model_state_pending   ModelState = 2 // 等待中
	ModelState_model_state_producing ModelState = 3 // 生产中
	ModelState_model_state_failed    ModelState = 4 // 生产失败
	ModelState_model_state_finish    ModelState = 5 // 完成
)

// Enum value maps for ModelState.
var (
	ModelState_name = map[int32]string{
		0: "model_state_unknown",
		1: "model_state_init",
		2: "model_state_pending",
		3: "model_state_producing",
		4: "model_state_failed",
		5: "model_state_finish",
	}
	ModelState_value = map[string]int32{
		"model_state_unknown":   0,
		"model_state_init":      1,
		"model_state_pending":   2,
		"model_state_producing": 3,
		"model_state_failed":    4,
		"model_state_finish":    5,
	}
)

func (x ModelState) Enum() *ModelState {
	p := new(ModelState)
	*p = x
	return p
}

func (x ModelState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelState) Descriptor() protoreflect.EnumDescriptor {
	return file_model_base_proto_enumTypes[8].Descriptor()
}

func (ModelState) Type() protoreflect.EnumType {
	return &file_model_base_proto_enumTypes[8]
}

func (x ModelState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelState.Descriptor instead.
func (ModelState) EnumDescriptor() ([]byte, []int) {
	return file_model_base_proto_rawDescGZIP(), []int{8}
}

// 用户模型结构
type UserModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelId       int64              `protobuf:"varint,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`                                      // 模型id
	ModelCategory ModelCategory      `protobuf:"varint,2,opt,name=model_category,json=modelCategory,proto3,enum=ModelCategory" json:"model_category,omitempty"` // 模型类别, 如图像分割，自然语言处理，图像重建
	ModelType     string             `protobuf:"bytes,3,opt,name=model_type,json=modelType,proto3" json:"model_type,omitempty"`                                 // 模型类型, unet, icnet
	ModelName     string             `protobuf:"bytes,4,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`                                 // 模型名称
	TrainDataset  *ModelTrainDataset `protobuf:"bytes,5,opt,name=train_dataset,json=trainDataset,proto3" json:"train_dataset,omitempty"`                        // 训练所用的数据集信息
	State         ModelState         `protobuf:"varint,7,opt,name=state,proto3,enum=ModelState" json:"state,omitempty"`                                         // 模型状态
	CreatedAt     int64              `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                // 创建时间
	UpdatedAt     int64              `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                // 更新时间
	SharedAt      int64              `protobuf:"varint,10,opt,name=shared_at,json=sharedAt,proto3" json:"shared_at,omitempty"`                                  // 分享时间
	Extra         *ModelExtra        `protobuf:"bytes,11,opt,name=extra,proto3" json:"extra,omitempty"`                                                         // 模型额外信息
}

func (x *UserModel) Reset() {
	*x = UserModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_base_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserModel) ProtoMessage() {}

func (x *UserModel) ProtoReflect() protoreflect.Message {
	mi := &file_model_base_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserModel.ProtoReflect.Descriptor instead.
func (*UserModel) Descriptor() ([]byte, []int) {
	return file_model_base_proto_rawDescGZIP(), []int{0}
}

func (x *UserModel) GetModelId() int64 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *UserModel) GetModelCategory() ModelCategory {
	if x != nil {
		return x.ModelCategory
	}
	return ModelCategory_model_category_unknown
}

func (x *UserModel) GetModelType() string {
	if x != nil {
		return x.ModelType
	}
	return ""
}

func (x *UserModel) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *UserModel) GetTrainDataset() *ModelTrainDataset {
	if x != nil {
		return x.TrainDataset
	}
	return nil
}

func (x *UserModel) GetState() ModelState {
	if x != nil {
		return x.State
	}
	return ModelState_model_state_unknown
}

func (x *UserModel) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UserModel) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *UserModel) GetSharedAt() int64 {
	if x != nil {
		return x.SharedAt
	}
	return 0
}

func (x *UserModel) GetExtra() *ModelExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ModelTrainDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrainDatasetId    int64   `protobuf:"varint,1,opt,name=train_dataset_id,json=trainDatasetId,proto3" json:"train_dataset_id,omitempty"`           // 训练数据集id
	TrainDatasetName  string  `protobuf:"bytes,2,opt,name=train_dataset_name,json=trainDatasetName,proto3" json:"train_dataset_name,omitempty"`      // 训练数据集名称
	ValDatasetId      int64   `protobuf:"varint,3,opt,name=val_dataset_id,json=valDatasetId,proto3" json:"val_dataset_id,omitempty"`                 // 验证数据集id
	ValDatasetName    string  `protobuf:"bytes,4,opt,name=val_dataset_name,json=valDatasetName,proto3" json:"val_dataset_name,omitempty"`            // 验证数据集名称
	TrainDatasetRatio float64 `protobuf:"fixed64,5,opt,name=train_dataset_ratio,json=trainDatasetRatio,proto3" json:"train_dataset_ratio,omitempty"` // 训练集占比, 只有当用户不指定验证集(val_dataset)时才会使用这个数据
}

func (x *ModelTrainDataset) Reset() {
	*x = ModelTrainDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_base_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelTrainDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelTrainDataset) ProtoMessage() {}

func (x *ModelTrainDataset) ProtoReflect() protoreflect.Message {
	mi := &file_model_base_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelTrainDataset.ProtoReflect.Descriptor instead.
func (*ModelTrainDataset) Descriptor() ([]byte, []int) {
	return file_model_base_proto_rawDescGZIP(), []int{1}
}

func (x *ModelTrainDataset) GetTrainDatasetId() int64 {
	if x != nil {
		return x.TrainDatasetId
	}
	return 0
}

func (x *ModelTrainDataset) GetTrainDatasetName() string {
	if x != nil {
		return x.TrainDatasetName
	}
	return ""
}

func (x *ModelTrainDataset) GetValDatasetId() int64 {
	if x != nil {
		return x.ValDatasetId
	}
	return 0
}

func (x *ModelTrainDataset) GetValDatasetName() string {
	if x != nil {
		return x.ValDatasetName
	}
	return ""
}

func (x *ModelTrainDataset) GetTrainDatasetRatio() float64 {
	if x != nil {
		return x.TrainDatasetRatio
	}
	return 0
}

type ModelExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageSeg *ImageSegModelInfo `protobuf:"bytes,1,opt,name=image_seg,json=imageSeg,proto3" json:"image_seg,omitempty"` // 图像分割
}

func (x *ModelExtra) Reset() {
	*x = ModelExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_base_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelExtra) ProtoMessage() {}

func (x *ModelExtra) ProtoReflect() protoreflect.Message {
	mi := &file_model_base_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelExtra.ProtoReflect.Descriptor instead.
func (*ModelExtra) Descriptor() ([]byte, []int) {
	return file_model_base_proto_rawDescGZIP(), []int{2}
}

func (x *ModelExtra) GetImageSeg() *ImageSegModelInfo {
	if x != nil {
		return x.ImageSeg
	}
	return nil
}

type ImageDataSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageWidth  int32 `protobuf:"varint,1,opt,name=image_width,json=imageWidth,proto3" json:"image_width,omitempty"`    // 图像宽度
	ImageHeight int32 `protobuf:"varint,2,opt,name=image_height,json=imageHeight,proto3" json:"image_height,omitempty"` // 图像高度
}

func (x *ImageDataSize) Reset() {
	*x = ImageDataSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_base_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageDataSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageDataSize) ProtoMessage() {}

func (x *ImageDataSize) ProtoReflect() protoreflect.Message {
	mi := &file_model_base_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageDataSize.ProtoReflect.Descriptor instead.
func (*ImageDataSize) Descriptor() ([]byte, []int) {
	return file_model_base_proto_rawDescGZIP(), []int{3}
}

func (x *ImageDataSize) GetImageWidth() int32 {
	if x != nil {
		return x.ImageWidth
	}
	return 0
}

func (x *ImageDataSize) GetImageHeight() int32 {
	if x != nil {
		return x.ImageHeight
	}
	return 0
}

type ImageSegModelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumClasses        int32          `protobuf:"varint,1,opt,name=num_classes,json=numClasses,proto3" json:"num_classes,omitempty"`                   // 类别数目
	NumEpochs         int32          `protobuf:"varint,2,opt,name=num_epochs,json=numEpochs,proto3" json:"num_epochs,omitempty"`                      // epoch 数量
	BatchSize         int32          `protobuf:"varint,3,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`                      // batch_size 数量
	Loss              []LossFunction `protobuf:"varint,4,rep,packed,name=loss,proto3,enum=LossFunction" json:"loss,omitempty"`                        // 损失函数
	Lr                float64        `protobuf:"fixed64,5,opt,name=lr,proto3" json:"lr,omitempty"`                                                    // 学习率
	LrPolicy          LRPolicy       `protobuf:"varint,6,opt,name=lr_policy,json=lrPolicy,proto3,enum=LRPolicy" json:"lr_policy,omitempty"`           // 学习率下降方法
	Optimizer         Optimizer      `protobuf:"varint,7,opt,name=optimizer,proto3,enum=Optimizer" json:"optimizer,omitempty"`                        // 优化算法
	FixResizeSize     []int32        `protobuf:"varint,8,rep,packed,name=fix_resize_size,json=fixResizeSize,proto3" json:"fix_resize_size,omitempty"` // 裁剪图片的尺寸
	CostTime          int32          `protobuf:"varint,10,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"`                        // 训练消耗时间, 单位秒
	CategoryIou       []float64      `protobuf:"fixed64,11,rep,packed,name=category_iou,json=categoryIou,proto3" json:"category_iou,omitempty"`       // 类别IOU
	CategoryAcc       []float64      `protobuf:"fixed64,12,rep,packed,name=category_acc,json=categoryAcc,proto3" json:"category_acc,omitempty"`       // 类别ACC
	AvgIou            float64        `protobuf:"fixed64,13,opt,name=avg_iou,json=avgIou,proto3" json:"avg_iou,omitempty"`                             // 平均IOU
	AvgAcc            float64        `protobuf:"fixed64,14,opt,name=avg_acc,json=avgAcc,proto3" json:"avg_acc,omitempty"`                             // 平均ACC
	Kappa             float64        `protobuf:"fixed64,15,opt,name=kappa,proto3" json:"kappa,omitempty"`
	TrainLossImageUrl string         `protobuf:"bytes,16,opt,name=train_loss_image_url,json=trainLossImageUrl,proto3" json:"train_loss_image_url,omitempty"` // 训练loss变化趋势图的url链接
	ValLossImageUrl   string         `protobuf:"bytes,17,opt,name=val_loss_image_url,json=valLossImageUrl,proto3" json:"val_loss_image_url,omitempty"`       // 验证loss变化趋势图的url链接
	ModelFileUrl      string         `protobuf:"bytes,18,opt,name=model_file_url,json=modelFileUrl,proto3" json:"model_file_url,omitempty"`                  // 模型参数url链接
	ImageSize         []int32        `protobuf:"varint,19,rep,packed,name=image_size,json=imageSize,proto3" json:"image_size,omitempty"`                     // 模型训练时图像的尺寸
}

func (x *ImageSegModelInfo) Reset() {
	*x = ImageSegModelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_base_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSegModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSegModelInfo) ProtoMessage() {}

func (x *ImageSegModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_model_base_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSegModelInfo.ProtoReflect.Descriptor instead.
func (*ImageSegModelInfo) Descriptor() ([]byte, []int) {
	return file_model_base_proto_rawDescGZIP(), []int{4}
}

func (x *ImageSegModelInfo) GetNumClasses() int32 {
	if x != nil {
		return x.NumClasses
	}
	return 0
}

func (x *ImageSegModelInfo) GetNumEpochs() int32 {
	if x != nil {
		return x.NumEpochs
	}
	return 0
}

func (x *ImageSegModelInfo) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *ImageSegModelInfo) GetLoss() []LossFunction {
	if x != nil {
		return x.Loss
	}
	return nil
}

func (x *ImageSegModelInfo) GetLr() float64 {
	if x != nil {
		return x.Lr
	}
	return 0
}

func (x *ImageSegModelInfo) GetLrPolicy() LRPolicy {
	if x != nil {
		return x.LrPolicy
	}
	return LRPolicy_lr_policy_unknown
}

func (x *ImageSegModelInfo) GetOptimizer() Optimizer {
	if x != nil {
		return x.Optimizer
	}
	return Optimizer_optimizer_unknown
}

func (x *ImageSegModelInfo) GetFixResizeSize() []int32 {
	if x != nil {
		return x.FixResizeSize
	}
	return nil
}

func (x *ImageSegModelInfo) GetCostTime() int32 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

func (x *ImageSegModelInfo) GetCategoryIou() []float64 {
	if x != nil {
		return x.CategoryIou
	}
	return nil
}

func (x *ImageSegModelInfo) GetCategoryAcc() []float64 {
	if x != nil {
		return x.CategoryAcc
	}
	return nil
}

func (x *ImageSegModelInfo) GetAvgIou() float64 {
	if x != nil {
		return x.AvgIou
	}
	return 0
}

func (x *ImageSegModelInfo) GetAvgAcc() float64 {
	if x != nil {
		return x.AvgAcc
	}
	return 0
}

func (x *ImageSegModelInfo) GetKappa() float64 {
	if x != nil {
		return x.Kappa
	}
	return 0
}

func (x *ImageSegModelInfo) GetTrainLossImageUrl() string {
	if x != nil {
		return x.TrainLossImageUrl
	}
	return ""
}

func (x *ImageSegModelInfo) GetValLossImageUrl() string {
	if x != nil {
		return x.ValLossImageUrl
	}
	return ""
}

func (x *ImageSegModelInfo) GetModelFileUrl() string {
	if x != nil {
		return x.ModelFileUrl
	}
	return ""
}

func (x *ImageSegModelInfo) GetImageSize() []int32 {
	if x != nil {
		return x.ImageSize
	}
	return nil
}

// 迭代参数
type TrainIterationParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumEpochs     int32          `protobuf:"varint,1,opt,name=num_epochs,json=numEpochs,proto3" json:"num_epochs,omitempty"`               // epoch 数量
	BatchSize     int32          `protobuf:"varint,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`               // batch_size 数量
	Loss          []LossFunction `protobuf:"varint,3,rep,packed,name=loss,proto3,enum=LossFunction" json:"loss,omitempty"`                 // 损失函数
	Lr            float64        `protobuf:"fixed64,4,opt,name=lr,proto3" json:"lr,omitempty"`                                             // 学习率
	LrPolicy      LRPolicy       `protobuf:"varint,5,opt,name=lr_policy,json=lrPolicy,proto3,enum=LRPolicy" json:"lr_policy,omitempty"`    // 学习率下降方法
	Optimizer     Optimizer      `protobuf:"varint,6,opt,name=optimizer,proto3,enum=Optimizer" json:"optimizer,omitempty"`                 // 优化算法
	LrWarmupSteps int32          `protobuf:"varint,7,opt,name=lr_warmup_steps,json=lrWarmupSteps,proto3" json:"lr_warmup_steps,omitempty"` // warmup_steps
}

func (x *TrainIterationParam) Reset() {
	*x = TrainIterationParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_base_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainIterationParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainIterationParam) ProtoMessage() {}

func (x *TrainIterationParam) ProtoReflect() protoreflect.Message {
	mi := &file_model_base_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainIterationParam.ProtoReflect.Descriptor instead.
func (*TrainIterationParam) Descriptor() ([]byte, []int) {
	return file_model_base_proto_rawDescGZIP(), []int{5}
}

func (x *TrainIterationParam) GetNumEpochs() int32 {
	if x != nil {
		return x.NumEpochs
	}
	return 0
}

func (x *TrainIterationParam) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *TrainIterationParam) GetLoss() []LossFunction {
	if x != nil {
		return x.Loss
	}
	return nil
}

func (x *TrainIterationParam) GetLr() float64 {
	if x != nil {
		return x.Lr
	}
	return 0
}

func (x *TrainIterationParam) GetLrPolicy() LRPolicy {
	if x != nil {
		return x.LrPolicy
	}
	return LRPolicy_lr_policy_unknown
}

func (x *TrainIterationParam) GetOptimizer() Optimizer {
	if x != nil {
		return x.Optimizer
	}
	return Optimizer_optimizer_unknown
}

func (x *TrainIterationParam) GetLrWarmupSteps() int32 {
	if x != nil {
		return x.LrWarmupSteps
	}
	return 0
}

// 数据增强选项
type DataAugmentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method        AugMethod      `protobuf:"varint,1,opt,name=method,proto3,enum=AugMethod" json:"method,omitempty"`                      // 数据增强使用的方法
	FixResizeSize *ImageDataSize `protobuf:"bytes,2,opt,name=fix_resize_size,json=fixResizeSize,proto3" json:"fix_resize_size,omitempty"` // 图像resize的固定尺寸（宽，高），非负
	Mirror        bool           `protobuf:"varint,3,opt,name=mirror,proto3" json:"mirror,omitempty"`                                     // 图像镜像左右翻转
	Flip          bool           `protobuf:"varint,4,opt,name=flip,proto3" json:"flip,omitempty"`                                         // 图像上下翻转开关
	FlipRatio     float64        `protobuf:"fixed64,5,opt,name=flip_ratio,json=flipRatio,proto3" json:"flip_ratio,omitempty"`             // 图像启动上下翻转的概率，0-1
}

func (x *DataAugmentation) Reset() {
	*x = DataAugmentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_base_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataAugmentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAugmentation) ProtoMessage() {}

func (x *DataAugmentation) ProtoReflect() protoreflect.Message {
	mi := &file_model_base_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAugmentation.ProtoReflect.Descriptor instead.
func (*DataAugmentation) Descriptor() ([]byte, []int) {
	return file_model_base_proto_rawDescGZIP(), []int{6}
}

func (x *DataAugmentation) GetMethod() AugMethod {
	if x != nil {
		return x.Method
	}
	return AugMethod_aug_method_unknown
}

func (x *DataAugmentation) GetFixResizeSize() *ImageDataSize {
	if x != nil {
		return x.FixResizeSize
	}
	return nil
}

func (x *DataAugmentation) GetMirror() bool {
	if x != nil {
		return x.Mirror
	}
	return false
}

func (x *DataAugmentation) GetFlip() bool {
	if x != nil {
		return x.Flip
	}
	return false
}

func (x *DataAugmentation) GetFlipRatio() float64 {
	if x != nil {
		return x.FlipRatio
	}
	return 0
}

// 数据增广配置, 用于提升模型鲁棒性
type DataRichCrop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxRotation           float64 `protobuf:"fixed64,1,opt,name=max_rotation,json=maxRotation,proto3" json:"max_rotation,omitempty"`                                 // 图像旋转最大角度，0-90
	MinAreaRatio          float64 `protobuf:"fixed64,2,opt,name=min_area_ratio,json=minAreaRatio,proto3" json:"min_area_ratio,omitempty"`                            // 裁取图像与原始图像面积比，0-1
	AspectRatio           float64 `protobuf:"fixed64,3,opt,name=aspect_ratio,json=aspectRatio,proto3" json:"aspect_ratio,omitempty"`                                 // 裁取图像宽高比范围，非负
	BrightnessJitterRatio float64 `protobuf:"fixed64,4,opt,name=brightness_jitter_ratio,json=brightnessJitterRatio,proto3" json:"brightness_jitter_ratio,omitempty"` // 亮度调节范围，0-1
	SaturationJitterRatio float64 `protobuf:"fixed64,5,opt,name=saturation_jitter_ratio,json=saturationJitterRatio,proto3" json:"saturation_jitter_ratio,omitempty"` // 饱和度调节范围，0-1
	ContrastJitterRatio   float64 `protobuf:"fixed64,6,opt,name=contrast_jitter_ratio,json=contrastJitterRatio,proto3" json:"contrast_jitter_ratio,omitempty"`       // 对比度调节范围，0-1
}

func (x *DataRichCrop) Reset() {
	*x = DataRichCrop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_base_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRichCrop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRichCrop) ProtoMessage() {}

func (x *DataRichCrop) ProtoReflect() protoreflect.Message {
	mi := &file_model_base_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRichCrop.ProtoReflect.Descriptor instead.
func (*DataRichCrop) Descriptor() ([]byte, []int) {
	return file_model_base_proto_rawDescGZIP(), []int{7}
}

func (x *DataRichCrop) GetMaxRotation() float64 {
	if x != nil {
		return x.MaxRotation
	}
	return 0
}

func (x *DataRichCrop) GetMinAreaRatio() float64 {
	if x != nil {
		return x.MinAreaRatio
	}
	return 0
}

func (x *DataRichCrop) GetAspectRatio() float64 {
	if x != nil {
		return x.AspectRatio
	}
	return 0
}

func (x *DataRichCrop) GetBrightnessJitterRatio() float64 {
	if x != nil {
		return x.BrightnessJitterRatio
	}
	return 0
}

func (x *DataRichCrop) GetSaturationJitterRatio() float64 {
	if x != nil {
		return x.SaturationJitterRatio
	}
	return 0
}

func (x *DataRichCrop) GetContrastJitterRatio() float64 {
	if x != nil {
		return x.ContrastJitterRatio
	}
	return 0
}

var File_model_base_proto protoreflect.FileDescriptor

var file_model_base_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf5, 0x02, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xeb, 0x01, 0x0a, 0x11, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x3d, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x67, 0x22, 0x53, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xed, 0x04, 0x0a,
	0x11, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x4c, 0x6f, 0x73, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x6c, 0x6f, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x02, 0x6c, 0x72, 0x12, 0x26, 0x0a, 0x09, 0x6c, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4c, 0x52, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x08, 0x6c, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x09,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x78, 0x5f, 0x72, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0d, 0x66, 0x69, 0x78, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6f, 0x75, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6f, 0x75, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x63,
	0x63, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x76, 0x67, 0x5f, 0x69, 0x6f, 0x75, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x61, 0x76, 0x67, 0x49, 0x6f, 0x75, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x76,
	0x67, 0x5f, 0x61, 0x63, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x76, 0x67,
	0x41, 0x63, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x6b, 0x61, 0x70, 0x70, 0x61, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x6f,
	0x73, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x12, 0x76, 0x61,
	0x6c, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x4c, 0x6f, 0x73, 0x73, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x80, 0x02, 0x0a,
	0x13, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x4c, 0x6f, 0x73, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x6c, 0x6f, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x6c, 0x72, 0x12, 0x26, 0x0a, 0x09, 0x6c, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4c, 0x52, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x08, 0x6c, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x28, 0x0a,
	0x09, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0a, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x72, 0x5f, 0x77, 0x61,
	0x72, 0x6d, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x6c, 0x72, 0x57, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x53, 0x74, 0x65, 0x70, 0x73, 0x22,
	0xb9, 0x01, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x41, 0x75, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x36, 0x0a, 0x0f, 0x66, 0x69, 0x78, 0x5f,
	0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x0d, 0x66, 0x69, 0x78, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x6c, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x6c, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x66, 0x6c, 0x69, 0x70, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x9e, 0x02, 0x0a, 0x0c,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x69, 0x63, 0x68, 0x43, 0x72, 0x6f, 0x70, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x62, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x36, 0x0a, 0x17, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x15, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x73, 0x74, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73,
	0x74, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x2a, 0x7b, 0x0a, 0x0c,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x10, 0x03, 0x2a, 0x49, 0x0a, 0x0d, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x16, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x67, 0x10, 0x01, 0x2a, 0xaf, 0x01, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x6e, 0x65, 0x74, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x63,
	0x6e, 0x65, 0x74, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x70, 0x73, 0x70, 0x6e, 0x65, 0x74, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x68, 0x72, 0x6e, 0x65, 0x74,
	0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6e, 0x6e, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x65, 0x70, 0x6c,
	0x61, 0x62, 0x76, 0x33, 0x10, 0x06, 0x2a, 0x5c, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x69, 0x63, 0x6f, 0x6d, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6a, 0x70, 0x67, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70,
	0x6e, 0x67, 0x10, 0x03, 0x2a, 0x73, 0x0a, 0x0c, 0x4c, 0x6f, 0x73, 0x73, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x6f, 0x66, 0x74, 0x6d, 0x61, 0x78, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x6c, 0x6f,
	0x73, 0x73, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x63, 0x65, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x63, 0x65, 0x10, 0x03, 0x2a, 0x64, 0x0a, 0x08, 0x4c, 0x52, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x15, 0x0a, 0x11, 0x6c, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x6c, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x6c, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x69,
	0x65, 0x63, 0x65, 0x77, 0x69, 0x73, 0x65, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x6c, 0x72, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x10, 0x03, 0x2a,
	0x49, 0x0a, 0x09, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x11,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72,
	0x5f, 0x73, 0x67, 0x64, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x6d, 0x10, 0x02, 0x2a, 0x76, 0x0a, 0x09, 0x41, 0x75,
	0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x61, 0x75, 0x67, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x61, 0x75, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x75, 0x6e,
	0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x61, 0x75, 0x67,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x61, 0x75, 0x67, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x10, 0x03, 0x2a, 0x9f, 0x01, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69,
	0x6e, 0x67, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x10, 0x05, 0x42, 0x1f, 0x5a, 0x1d, 0x2e, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x62, 0x67, 0x65, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_model_base_proto_rawDescOnce sync.Once
	file_model_base_proto_rawDescData = file_model_base_proto_rawDesc
)

func file_model_base_proto_rawDescGZIP() []byte {
	file_model_base_proto_rawDescOnce.Do(func() {
		file_model_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_model_base_proto_rawDescData)
	})
	return file_model_base_proto_rawDescData
}

var file_model_base_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_model_base_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_model_base_proto_goTypes = []interface{}{
	(DataSortType)(0),           // 0: DataSortType
	(ModelCategory)(0),          // 1: ModelCategory
	(ModelType)(0),              // 2: ModelType
	(FileType)(0),               // 3: FileType
	(LossFunction)(0),           // 4: LossFunction
	(LRPolicy)(0),               // 5: LRPolicy
	(Optimizer)(0),              // 6: Optimizer
	(AugMethod)(0),              // 7: AugMethod
	(ModelState)(0),             // 8: ModelState
	(*UserModel)(nil),           // 9: UserModel
	(*ModelTrainDataset)(nil),   // 10: ModelTrainDataset
	(*ModelExtra)(nil),          // 11: ModelExtra
	(*ImageDataSize)(nil),       // 12: ImageDataSize
	(*ImageSegModelInfo)(nil),   // 13: ImageSegModelInfo
	(*TrainIterationParam)(nil), // 14: TrainIterationParam
	(*DataAugmentation)(nil),    // 15: DataAugmentation
	(*DataRichCrop)(nil),        // 16: DataRichCrop
}
var file_model_base_proto_depIdxs = []int32{
	1,  // 0: UserModel.model_category:type_name -> ModelCategory
	10, // 1: UserModel.train_dataset:type_name -> ModelTrainDataset
	8,  // 2: UserModel.state:type_name -> ModelState
	11, // 3: UserModel.extra:type_name -> ModelExtra
	13, // 4: ModelExtra.image_seg:type_name -> ImageSegModelInfo
	4,  // 5: ImageSegModelInfo.loss:type_name -> LossFunction
	5,  // 6: ImageSegModelInfo.lr_policy:type_name -> LRPolicy
	6,  // 7: ImageSegModelInfo.optimizer:type_name -> Optimizer
	4,  // 8: TrainIterationParam.loss:type_name -> LossFunction
	5,  // 9: TrainIterationParam.lr_policy:type_name -> LRPolicy
	6,  // 10: TrainIterationParam.optimizer:type_name -> Optimizer
	7,  // 11: DataAugmentation.method:type_name -> AugMethod
	12, // 12: DataAugmentation.fix_resize_size:type_name -> ImageDataSize
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_model_base_proto_init() }
func file_model_base_proto_init() {
	if File_model_base_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_model_base_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_base_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelTrainDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_base_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_base_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageDataSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_base_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageSegModelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_base_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainIterationParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_base_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataAugmentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_base_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRichCrop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_model_base_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_model_base_proto_goTypes,
		DependencyIndexes: file_model_base_proto_depIdxs,
		EnumInfos:         file_model_base_proto_enumTypes,
		MessageInfos:      file_model_base_proto_msgTypes,
	}.Build()
	File_model_base_proto = out.File
	file_model_base_proto_rawDesc = nil
	file_model_base_proto_goTypes = nil
	file_model_base_proto_depIdxs = nil
}
