// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: label_dataset_srv_base.proto

package label_dataset_srv

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SortType int32

const (
	SortType_sort_type_unknown       SortType = 0
	SortType_sort_create_time_latest SortType = 1
	SortType_sort_update_time_latest SortType = 2
	SortType_sort_share_time_latest  SortType = 3
)

// Enum value maps for SortType.
var (
	SortType_name = map[int32]string{
		0: "sort_type_unknown",
		1: "sort_create_time_latest",
		2: "sort_update_time_latest",
		3: "sort_share_time_latest",
	}
	SortType_value = map[string]int32{
		"sort_type_unknown":       0,
		"sort_create_time_latest": 1,
		"sort_update_time_latest": 2,
		"sort_share_time_latest":  3,
	}
)

func (x SortType) Enum() *SortType {
	p := new(SortType)
	*p = x
	return p
}

func (x SortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortType) Descriptor() protoreflect.EnumDescriptor {
	return file_label_dataset_srv_base_proto_enumTypes[0].Descriptor()
}

func (SortType) Type() protoreflect.EnumType {
	return &file_label_dataset_srv_base_proto_enumTypes[0]
}

func (x SortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortType.Descriptor instead.
func (SortType) EnumDescriptor() ([]byte, []int) {
	return file_label_dataset_srv_base_proto_rawDescGZIP(), []int{0}
}

type TagType int32

const (
	TagType_tag_type_unknown     TagType = 0
	TagType_tag_type_personal    TagType = 1
	TagType_tag_type_institution TagType = 2
)

// Enum value maps for TagType.
var (
	TagType_name = map[int32]string{
		0: "tag_type_unknown",
		1: "tag_type_personal",
		2: "tag_type_institution",
	}
	TagType_value = map[string]int32{
		"tag_type_unknown":     0,
		"tag_type_personal":    1,
		"tag_type_institution": 2,
	}
)

func (x TagType) Enum() *TagType {
	p := new(TagType)
	*p = x
	return p
}

func (x TagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TagType) Descriptor() protoreflect.EnumDescriptor {
	return file_label_dataset_srv_base_proto_enumTypes[1].Descriptor()
}

func (TagType) Type() protoreflect.EnumType {
	return &file_label_dataset_srv_base_proto_enumTypes[1]
}

func (x TagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TagType.Descriptor instead.
func (TagType) EnumDescriptor() ([]byte, []int) {
	return file_label_dataset_srv_base_proto_rawDescGZIP(), []int{1}
}

type TagCategory int32

const (
	TagCategory_tag_category_unknown TagCategory = 0
	TagCategory_tag_category_dataset TagCategory = 1
)

// Enum value maps for TagCategory.
var (
	TagCategory_name = map[int32]string{
		0: "tag_category_unknown",
		1: "tag_category_dataset",
	}
	TagCategory_value = map[string]int32{
		"tag_category_unknown": 0,
		"tag_category_dataset": 1,
	}
)

func (x TagCategory) Enum() *TagCategory {
	p := new(TagCategory)
	*p = x
	return p
}

func (x TagCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TagCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_label_dataset_srv_base_proto_enumTypes[2].Descriptor()
}

func (TagCategory) Type() protoreflect.EnumType {
	return &file_label_dataset_srv_base_proto_enumTypes[2]
}

func (x TagCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TagCategory.Descriptor instead.
func (TagCategory) EnumDescriptor() ([]byte, []int) {
	return file_label_dataset_srv_base_proto_rawDescGZIP(), []int{2}
}

type DatasetType int32

const (
	DatasetType_dataset_type_unknown DatasetType = 0
	DatasetType_dataset_type_image   DatasetType = 1
	DatasetType_dataset_type_dicom   DatasetType = 2
)

// Enum value maps for DatasetType.
var (
	DatasetType_name = map[int32]string{
		0: "dataset_type_unknown",
		1: "dataset_type_image",
		2: "dataset_type_dicom",
	}
	DatasetType_value = map[string]int32{
		"dataset_type_unknown": 0,
		"dataset_type_image":   1,
		"dataset_type_dicom":   2,
	}
)

func (x DatasetType) Enum() *DatasetType {
	p := new(DatasetType)
	*p = x
	return p
}

func (x DatasetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatasetType) Descriptor() protoreflect.EnumDescriptor {
	return file_label_dataset_srv_base_proto_enumTypes[3].Descriptor()
}

func (DatasetType) Type() protoreflect.EnumType {
	return &file_label_dataset_srv_base_proto_enumTypes[3]
}

func (x DatasetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatasetType.Descriptor instead.
func (DatasetType) EnumDescriptor() ([]byte, []int) {
	return file_label_dataset_srv_base_proto_rawDescGZIP(), []int{3}
}

type DatasetCategory int32

const (
	DatasetCategory_dataset_category_unknown    DatasetCategory = 0
	DatasetCategory_dataset_category_state      DatasetCategory = 1
	DatasetCategory_dataset_category_local_file DatasetCategory = 2
)

// Enum value maps for DatasetCategory.
var (
	DatasetCategory_name = map[int32]string{
		0: "dataset_category_unknown",
		1: "dataset_category_state",
		2: "dataset_category_local_file",
	}
	DatasetCategory_value = map[string]int32{
		"dataset_category_unknown":    0,
		"dataset_category_state":      1,
		"dataset_category_local_file": 2,
	}
)

func (x DatasetCategory) Enum() *DatasetCategory {
	p := new(DatasetCategory)
	*p = x
	return p
}

func (x DatasetCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatasetCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_label_dataset_srv_base_proto_enumTypes[4].Descriptor()
}

func (DatasetCategory) Type() protoreflect.EnumType {
	return &file_label_dataset_srv_base_proto_enumTypes[4]
}

func (x DatasetCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatasetCategory.Descriptor instead.
func (DatasetCategory) EnumDescriptor() ([]byte, []int) {
	return file_label_dataset_srv_base_proto_rawDescGZIP(), []int{4}
}

type StateType int32

const (
	StateType_file_type_unknown StateType = 0
	StateType_file_type_dicom   StateType = 1
	StateType_file_type_jpg     StateType = 2
	StateType_file_type_png     StateType = 3
)

// Enum value maps for StateType.
var (
	StateType_name = map[int32]string{
		0: "file_type_unknown",
		1: "file_type_dicom",
		2: "file_type_jpg",
		3: "file_type_png",
	}
	StateType_value = map[string]int32{
		"file_type_unknown": 0,
		"file_type_dicom":   1,
		"file_type_jpg":     2,
		"file_type_png":     3,
	}
)

func (x StateType) Enum() *StateType {
	p := new(StateType)
	*p = x
	return p
}

func (x StateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StateType) Descriptor() protoreflect.EnumDescriptor {
	return file_label_dataset_srv_base_proto_enumTypes[5].Descriptor()
}

func (StateType) Type() protoreflect.EnumType {
	return &file_label_dataset_srv_base_proto_enumTypes[5]
}

func (x StateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StateType.Descriptor instead.
func (StateType) EnumDescriptor() ([]byte, []int) {
	return file_label_dataset_srv_base_proto_rawDescGZIP(), []int{5}
}

type LabelState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StateId           int64                 `protobuf:"varint,2,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	ShareUserName     string                `protobuf:"bytes,4,opt,name=share_user_name,json=shareUserName,proto3" json:"share_user_name,omitempty"`
	State             string                `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	UrlList           []string              `protobuf:"bytes,6,rep,name=url_list,json=urlList,proto3" json:"url_list,omitempty"`                                    // url列表
	CanEdit           int32                 `protobuf:"varint,7,opt,name=can_edit,json=canEdit,proto3" json:"can_edit,omitempty"`                                   // 是否可以编辑, 1为可编辑
	CanShare          int32                 `protobuf:"varint,8,opt,name=can_share,json=canShare,proto3" json:"can_share,omitempty"`                                // 是否可以分享, 1为可分享
	CreatedAt         int64                 `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                             // 创建时间
	UpdatedAt         int64                 `protobuf:"varint,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                            // 更新时间
	SharedAt          int64                 `protobuf:"varint,11,opt,name=shared_at,json=sharedAt,proto3" json:"shared_at,omitempty"`                               // 分享时间
	StateName         string                `protobuf:"bytes,12,opt,name=state_name,json=stateName,proto3" json:"state_name,omitempty"`                             // 本条记录的标记名字
	FeatureMapUrlList []string              `protobuf:"bytes,13,rep,name=feature_map_url_list,json=featureMapUrlList,proto3" json:"feature_map_url_list,omitempty"` // feature_map_url列表
	ImageUrlList      []string              `protobuf:"bytes,14,rep,name=image_url_list,json=imageUrlList,proto3" json:"image_url_list,omitempty"`                  // dicom图像文件url列表
	FileCount         int32                 `protobuf:"varint,15,opt,name=file_count,json=fileCount,proto3" json:"file_count,omitempty"`                            // 文件数量
	Type              StateType             `protobuf:"varint,16,opt,name=type,proto3,enum=label_dataset_srv.StateType" json:"type,omitempty"`                      // 文件类型
	ImageSize         *LabelState_ImageSize `protobuf:"bytes,17,opt,name=image_size,json=imageSize,proto3" json:"image_size,omitempty"`
}

func (x *LabelState) Reset() {
	*x = LabelState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_label_dataset_srv_base_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelState) ProtoMessage() {}

func (x *LabelState) ProtoReflect() protoreflect.Message {
	mi := &file_label_dataset_srv_base_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelState.ProtoReflect.Descriptor instead.
func (*LabelState) Descriptor() ([]byte, []int) {
	return file_label_dataset_srv_base_proto_rawDescGZIP(), []int{0}
}

func (x *LabelState) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LabelState) GetStateId() int64 {
	if x != nil {
		return x.StateId
	}
	return 0
}

func (x *LabelState) GetShareUserName() string {
	if x != nil {
		return x.ShareUserName
	}
	return ""
}

func (x *LabelState) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *LabelState) GetUrlList() []string {
	if x != nil {
		return x.UrlList
	}
	return nil
}

func (x *LabelState) GetCanEdit() int32 {
	if x != nil {
		return x.CanEdit
	}
	return 0
}

func (x *LabelState) GetCanShare() int32 {
	if x != nil {
		return x.CanShare
	}
	return 0
}

func (x *LabelState) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *LabelState) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *LabelState) GetSharedAt() int64 {
	if x != nil {
		return x.SharedAt
	}
	return 0
}

func (x *LabelState) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

func (x *LabelState) GetFeatureMapUrlList() []string {
	if x != nil {
		return x.FeatureMapUrlList
	}
	return nil
}

func (x *LabelState) GetImageUrlList() []string {
	if x != nil {
		return x.ImageUrlList
	}
	return nil
}

func (x *LabelState) GetFileCount() int32 {
	if x != nil {
		return x.FileCount
	}
	return 0
}

func (x *LabelState) GetType() StateType {
	if x != nil {
		return x.Type
	}
	return StateType_file_type_unknown
}

func (x *LabelState) GetImageSize() *LabelState_ImageSize {
	if x != nil {
		return x.ImageSize
	}
	return nil
}

type StateTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateId     int64       `protobuf:"varint,1,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	TagType     TagType     `protobuf:"varint,2,opt,name=tag_type,json=tagType,proto3,enum=label_dataset_srv.TagType" json:"tag_type,omitempty"`
	TagCategory TagCategory `protobuf:"varint,3,opt,name=tag_category,json=tagCategory,proto3,enum=label_dataset_srv.TagCategory" json:"tag_category,omitempty"`
	TagValue    int64       `protobuf:"varint,4,opt,name=tag_value,json=tagValue,proto3" json:"tag_value,omitempty"`
}

func (x *StateTag) Reset() {
	*x = StateTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_label_dataset_srv_base_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateTag) ProtoMessage() {}

func (x *StateTag) ProtoReflect() protoreflect.Message {
	mi := &file_label_dataset_srv_base_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateTag.ProtoReflect.Descriptor instead.
func (*StateTag) Descriptor() ([]byte, []int) {
	return file_label_dataset_srv_base_proto_rawDescGZIP(), []int{1}
}

func (x *StateTag) GetStateId() int64 {
	if x != nil {
		return x.StateId
	}
	return 0
}

func (x *StateTag) GetTagType() TagType {
	if x != nil {
		return x.TagType
	}
	return TagType_tag_type_unknown
}

func (x *StateTag) GetTagCategory() TagCategory {
	if x != nil {
		return x.TagCategory
	}
	return TagCategory_tag_category_unknown
}

func (x *StateTag) GetTagValue() int64 {
	if x != nil {
		return x.TagValue
	}
	return 0
}

type Dataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type          DatasetType     `protobuf:"varint,3,opt,name=type,proto3,enum=label_dataset_srv.DatasetType" json:"type,omitempty"`
	Category      DatasetCategory `protobuf:"varint,4,opt,name=category,proto3,enum=label_dataset_srv.DatasetCategory" json:"category,omitempty"`
	ShareUserName string          `protobuf:"bytes,5,opt,name=share_user_name,json=shareUserName,proto3" json:"share_user_name,omitempty"`
	CanEdit       int32           `protobuf:"varint,6,opt,name=can_edit,json=canEdit,proto3" json:"can_edit,omitempty"`
	CanShare      int32           `protobuf:"varint,7,opt,name=can_share,json=canShare,proto3" json:"can_share,omitempty"`
	CreatedAt     int64           `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     int64           `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	SharedAt      int64           `protobuf:"varint,10,opt,name=shared_at,json=sharedAt,proto3" json:"shared_at,omitempty"`
}

func (x *Dataset) Reset() {
	*x = Dataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_label_dataset_srv_base_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataset) ProtoMessage() {}

func (x *Dataset) ProtoReflect() protoreflect.Message {
	mi := &file_label_dataset_srv_base_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataset.ProtoReflect.Descriptor instead.
func (*Dataset) Descriptor() ([]byte, []int) {
	return file_label_dataset_srv_base_proto_rawDescGZIP(), []int{2}
}

func (x *Dataset) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Dataset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dataset) GetType() DatasetType {
	if x != nil {
		return x.Type
	}
	return DatasetType_dataset_type_unknown
}

func (x *Dataset) GetCategory() DatasetCategory {
	if x != nil {
		return x.Category
	}
	return DatasetCategory_dataset_category_unknown
}

func (x *Dataset) GetShareUserName() string {
	if x != nil {
		return x.ShareUserName
	}
	return ""
}

func (x *Dataset) GetCanEdit() int32 {
	if x != nil {
		return x.CanEdit
	}
	return 0
}

func (x *Dataset) GetCanShare() int32 {
	if x != nil {
		return x.CanShare
	}
	return 0
}

func (x *Dataset) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Dataset) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Dataset) GetSharedAt() int64 {
	if x != nil {
		return x.SharedAt
	}
	return 0
}

type LabelState_ImageSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageWidth  int32 `protobuf:"varint,1,opt,name=image_width,json=imageWidth,proto3" json:"image_width,omitempty"`    // 图像宽度
	ImageHeight int32 `protobuf:"varint,2,opt,name=image_height,json=imageHeight,proto3" json:"image_height,omitempty"` // 图像高度
}

func (x *LabelState_ImageSize) Reset() {
	*x = LabelState_ImageSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_label_dataset_srv_base_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelState_ImageSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelState_ImageSize) ProtoMessage() {}

func (x *LabelState_ImageSize) ProtoReflect() protoreflect.Message {
	mi := &file_label_dataset_srv_base_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelState_ImageSize.ProtoReflect.Descriptor instead.
func (*LabelState_ImageSize) Descriptor() ([]byte, []int) {
	return file_label_dataset_srv_base_proto_rawDescGZIP(), []int{0, 0}
}

func (x *LabelState_ImageSize) GetImageWidth() int32 {
	if x != nil {
		return x.ImageWidth
	}
	return 0
}

func (x *LabelState_ImageSize) GetImageHeight() int32 {
	if x != nil {
		return x.ImageHeight
	}
	return 0
}

type Dataset_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateId   int64  `protobuf:"varint,1,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	StateName string `protobuf:"bytes,2,opt,name=state_name,json=stateName,proto3" json:"state_name,omitempty"`
}

func (x *Dataset_State) Reset() {
	*x = Dataset_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_label_dataset_srv_base_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataset_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataset_State) ProtoMessage() {}

func (x *Dataset_State) ProtoReflect() protoreflect.Message {
	mi := &file_label_dataset_srv_base_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataset_State.ProtoReflect.Descriptor instead.
func (*Dataset_State) Descriptor() ([]byte, []int) {
	return file_label_dataset_srv_base_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Dataset_State) GetStateId() int64 {
	if x != nil {
		return x.StateId
	}
	return 0
}

func (x *Dataset_State) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

type Dataset_LocalFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageDirPath string `protobuf:"bytes,1,opt,name=image_dir_path,json=imageDirPath,proto3" json:"image_dir_path,omitempty"` // 图像文件路径
	MaskDirPath  string `protobuf:"bytes,2,opt,name=mask_dir_path,json=maskDirPath,proto3" json:"mask_dir_path,omitempty"`    // mask文件路径
}

func (x *Dataset_LocalFile) Reset() {
	*x = Dataset_LocalFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_label_dataset_srv_base_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataset_LocalFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataset_LocalFile) ProtoMessage() {}

func (x *Dataset_LocalFile) ProtoReflect() protoreflect.Message {
	mi := &file_label_dataset_srv_base_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataset_LocalFile.ProtoReflect.Descriptor instead.
func (*Dataset_LocalFile) Descriptor() ([]byte, []int) {
	return file_label_dataset_srv_base_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Dataset_LocalFile) GetImageDirPath() string {
	if x != nil {
		return x.ImageDirPath
	}
	return ""
}

func (x *Dataset_LocalFile) GetMaskDirPath() string {
	if x != nil {
		return x.MaskDirPath
	}
	return ""
}

var File_label_dataset_srv_base_proto protoreflect.FileDescriptor

var file_label_dataset_srv_base_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x73, 0x72, 0x76, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x72,
	0x76, 0x22, 0x83, 0x05, 0x0a, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70,
	0x55, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x72, 0x76, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46,
	0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x73, 0x72, 0x76, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x4f, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x73, 0x72, 0x76, 0x2e, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x74,
	0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x72, 0x76,
	0x2e, 0x54, 0x61, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x61,
	0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf6, 0x03, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x72, 0x76, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x72, 0x76,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x61, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x41, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x55, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x69, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x6d,
	0x61, 0x73, 0x6b, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x73, 0x6b, 0x44, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x2a,
	0x77, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x10, 0x03, 0x2a, 0x50, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x74, 0x61, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x2a, 0x41, 0x0a, 0x0b, 0x54, 0x61,
	0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x74, 0x61, 0x67,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x10, 0x01, 0x2a, 0x57, 0x0a,
	0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64,
	0x69, 0x63, 0x6f, 0x6d, 0x10, 0x02, 0x2a, 0x6c, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x18, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x10, 0x02, 0x2a, 0x5d, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x69, 0x63, 0x6f, 0x6d, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6a, 0x70, 0x67, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x6e,
	0x67, 0x10, 0x03, 0x42, 0x27, 0x5a, 0x25, 0x2e, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x62, 0x67, 0x65, 0x6e, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x72, 0x76, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_label_dataset_srv_base_proto_rawDescOnce sync.Once
	file_label_dataset_srv_base_proto_rawDescData = file_label_dataset_srv_base_proto_rawDesc
)

func file_label_dataset_srv_base_proto_rawDescGZIP() []byte {
	file_label_dataset_srv_base_proto_rawDescOnce.Do(func() {
		file_label_dataset_srv_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_label_dataset_srv_base_proto_rawDescData)
	})
	return file_label_dataset_srv_base_proto_rawDescData
}

var file_label_dataset_srv_base_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_label_dataset_srv_base_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_label_dataset_srv_base_proto_goTypes = []interface{}{
	(SortType)(0),                // 0: label_dataset_srv.SortType
	(TagType)(0),                 // 1: label_dataset_srv.TagType
	(TagCategory)(0),             // 2: label_dataset_srv.TagCategory
	(DatasetType)(0),             // 3: label_dataset_srv.DatasetType
	(DatasetCategory)(0),         // 4: label_dataset_srv.DatasetCategory
	(StateType)(0),               // 5: label_dataset_srv.StateType
	(*LabelState)(nil),           // 6: label_dataset_srv.LabelState
	(*StateTag)(nil),             // 7: label_dataset_srv.StateTag
	(*Dataset)(nil),              // 8: label_dataset_srv.Dataset
	(*LabelState_ImageSize)(nil), // 9: label_dataset_srv.LabelState.ImageSize
	(*Dataset_State)(nil),        // 10: label_dataset_srv.Dataset.State
	(*Dataset_LocalFile)(nil),    // 11: label_dataset_srv.Dataset.LocalFile
}
var file_label_dataset_srv_base_proto_depIdxs = []int32{
	5, // 0: label_dataset_srv.LabelState.type:type_name -> label_dataset_srv.StateType
	9, // 1: label_dataset_srv.LabelState.image_size:type_name -> label_dataset_srv.LabelState.ImageSize
	1, // 2: label_dataset_srv.StateTag.tag_type:type_name -> label_dataset_srv.TagType
	2, // 3: label_dataset_srv.StateTag.tag_category:type_name -> label_dataset_srv.TagCategory
	3, // 4: label_dataset_srv.Dataset.type:type_name -> label_dataset_srv.DatasetType
	4, // 5: label_dataset_srv.Dataset.category:type_name -> label_dataset_srv.DatasetCategory
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_label_dataset_srv_base_proto_init() }
func file_label_dataset_srv_base_proto_init() {
	if File_label_dataset_srv_base_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_label_dataset_srv_base_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_label_dataset_srv_base_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_label_dataset_srv_base_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_label_dataset_srv_base_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelState_ImageSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_label_dataset_srv_base_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataset_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_label_dataset_srv_base_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataset_LocalFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_label_dataset_srv_base_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_label_dataset_srv_base_proto_goTypes,
		DependencyIndexes: file_label_dataset_srv_base_proto_depIdxs,
		EnumInfos:         file_label_dataset_srv_base_proto_enumTypes,
		MessageInfos:      file_label_dataset_srv_base_proto_msgTypes,
	}.Build()
	File_label_dataset_srv_base_proto = out.File
	file_label_dataset_srv_base_proto_rawDesc = nil
	file_label_dataset_srv_base_proto_goTypes = nil
	file_label_dataset_srv_base_proto_depIdxs = nil
}
