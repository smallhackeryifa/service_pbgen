// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: service.proto

package label_dataset_srv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LabelDatasetClient is the client API for LabelDataset service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LabelDatasetClient interface {
	// 创建state
	StateCreate(ctx context.Context, in *StateCreateRequest, opts ...grpc.CallOption) (*StateCreateResponse, error)
	// 获取state详情
	StateGet(ctx context.Context, in *StateGetRequest, opts ...grpc.CallOption) (*StateGetResponse, error)
	// state列表
	StateList(ctx context.Context, in *StateListRequest, opts ...grpc.CallOption) (*StateListResponse, error)
	// 更新state
	StateUpdate(ctx context.Context, in *StateUpdateRequest, opts ...grpc.CallOption) (*StateUpdateResponse, error)
	// 删除state
	StateDelete(ctx context.Context, in *StateDeleteRequest, opts ...grpc.CallOption) (*StateDeleteResponse, error)
	// 搜索state
	StateSearch(ctx context.Context, in *StateSearchRequest, opts ...grpc.CallOption) (*StateSearchResponse, error)
	// 保存state快照
	StateSnapshotSave(ctx context.Context, in *StateSnapshotSaveRequest, opts ...grpc.CallOption) (*StateSnapshotSaveResponse, error)
	// 获取state快照
	StateSnapshotGet(ctx context.Context, in *StateSnapshotGetRequest, opts ...grpc.CallOption) (*StateSnapshotGetResponse, error)
	// 创建数据集
	DatasetCreate(ctx context.Context, in *DatasetCreateRequest, opts ...grpc.CallOption) (*DatasetCreateResponse, error)
	// 获取数据集
	DatasetGet(ctx context.Context, in *DatasetGetRequest, opts ...grpc.CallOption) (*DatasetGetResponse, error)
	// 数据集列表
	DatasetList(ctx context.Context, in *DatasetListRequest, opts ...grpc.CallOption) (*DatasetListResponse, error)
	// 搜索数据集
	DatasetSearch(ctx context.Context, in *DatasetSearchRequest, opts ...grpc.CallOption) (*DatasetSearchResponse, error)
	// 数据集更新
	DatasetUpdate(ctx context.Context, in *DatasetUpdateRequest, opts ...grpc.CallOption) (*DatasetUpdateResponse, error)
	// 删除数据集
	DatasetDelete(ctx context.Context, in *DatasetDeleteRequest, opts ...grpc.CallOption) (*DatasetDeleteResponse, error)
	// 分享数据集
	DatasetShare(ctx context.Context, in *DatasetShareRequest, opts ...grpc.CallOption) (*DatasetShareResponse, error)
}

type labelDatasetClient struct {
	cc grpc.ClientConnInterface
}

func NewLabelDatasetClient(cc grpc.ClientConnInterface) LabelDatasetClient {
	return &labelDatasetClient{cc}
}

func (c *labelDatasetClient) StateCreate(ctx context.Context, in *StateCreateRequest, opts ...grpc.CallOption) (*StateCreateResponse, error) {
	out := new(StateCreateResponse)
	err := c.cc.Invoke(ctx, "/label_dataset_srv.LabelDataset/StateCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelDatasetClient) StateGet(ctx context.Context, in *StateGetRequest, opts ...grpc.CallOption) (*StateGetResponse, error) {
	out := new(StateGetResponse)
	err := c.cc.Invoke(ctx, "/label_dataset_srv.LabelDataset/StateGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelDatasetClient) StateList(ctx context.Context, in *StateListRequest, opts ...grpc.CallOption) (*StateListResponse, error) {
	out := new(StateListResponse)
	err := c.cc.Invoke(ctx, "/label_dataset_srv.LabelDataset/StateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelDatasetClient) StateUpdate(ctx context.Context, in *StateUpdateRequest, opts ...grpc.CallOption) (*StateUpdateResponse, error) {
	out := new(StateUpdateResponse)
	err := c.cc.Invoke(ctx, "/label_dataset_srv.LabelDataset/StateUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelDatasetClient) StateDelete(ctx context.Context, in *StateDeleteRequest, opts ...grpc.CallOption) (*StateDeleteResponse, error) {
	out := new(StateDeleteResponse)
	err := c.cc.Invoke(ctx, "/label_dataset_srv.LabelDataset/StateDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelDatasetClient) StateSearch(ctx context.Context, in *StateSearchRequest, opts ...grpc.CallOption) (*StateSearchResponse, error) {
	out := new(StateSearchResponse)
	err := c.cc.Invoke(ctx, "/label_dataset_srv.LabelDataset/StateSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelDatasetClient) StateSnapshotSave(ctx context.Context, in *StateSnapshotSaveRequest, opts ...grpc.CallOption) (*StateSnapshotSaveResponse, error) {
	out := new(StateSnapshotSaveResponse)
	err := c.cc.Invoke(ctx, "/label_dataset_srv.LabelDataset/StateSnapshotSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelDatasetClient) StateSnapshotGet(ctx context.Context, in *StateSnapshotGetRequest, opts ...grpc.CallOption) (*StateSnapshotGetResponse, error) {
	out := new(StateSnapshotGetResponse)
	err := c.cc.Invoke(ctx, "/label_dataset_srv.LabelDataset/StateSnapshotGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelDatasetClient) DatasetCreate(ctx context.Context, in *DatasetCreateRequest, opts ...grpc.CallOption) (*DatasetCreateResponse, error) {
	out := new(DatasetCreateResponse)
	err := c.cc.Invoke(ctx, "/label_dataset_srv.LabelDataset/DatasetCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelDatasetClient) DatasetGet(ctx context.Context, in *DatasetGetRequest, opts ...grpc.CallOption) (*DatasetGetResponse, error) {
	out := new(DatasetGetResponse)
	err := c.cc.Invoke(ctx, "/label_dataset_srv.LabelDataset/DatasetGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelDatasetClient) DatasetList(ctx context.Context, in *DatasetListRequest, opts ...grpc.CallOption) (*DatasetListResponse, error) {
	out := new(DatasetListResponse)
	err := c.cc.Invoke(ctx, "/label_dataset_srv.LabelDataset/DatasetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelDatasetClient) DatasetSearch(ctx context.Context, in *DatasetSearchRequest, opts ...grpc.CallOption) (*DatasetSearchResponse, error) {
	out := new(DatasetSearchResponse)
	err := c.cc.Invoke(ctx, "/label_dataset_srv.LabelDataset/DatasetSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelDatasetClient) DatasetUpdate(ctx context.Context, in *DatasetUpdateRequest, opts ...grpc.CallOption) (*DatasetUpdateResponse, error) {
	out := new(DatasetUpdateResponse)
	err := c.cc.Invoke(ctx, "/label_dataset_srv.LabelDataset/DatasetUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelDatasetClient) DatasetDelete(ctx context.Context, in *DatasetDeleteRequest, opts ...grpc.CallOption) (*DatasetDeleteResponse, error) {
	out := new(DatasetDeleteResponse)
	err := c.cc.Invoke(ctx, "/label_dataset_srv.LabelDataset/DatasetDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelDatasetClient) DatasetShare(ctx context.Context, in *DatasetShareRequest, opts ...grpc.CallOption) (*DatasetShareResponse, error) {
	out := new(DatasetShareResponse)
	err := c.cc.Invoke(ctx, "/label_dataset_srv.LabelDataset/DatasetShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabelDatasetServer is the server API for LabelDataset service.
// All implementations must embed UnimplementedLabelDatasetServer
// for forward compatibility
type LabelDatasetServer interface {
	// 创建state
	StateCreate(context.Context, *StateCreateRequest) (*StateCreateResponse, error)
	// 获取state详情
	StateGet(context.Context, *StateGetRequest) (*StateGetResponse, error)
	// state列表
	StateList(context.Context, *StateListRequest) (*StateListResponse, error)
	// 更新state
	StateUpdate(context.Context, *StateUpdateRequest) (*StateUpdateResponse, error)
	// 删除state
	StateDelete(context.Context, *StateDeleteRequest) (*StateDeleteResponse, error)
	// 搜索state
	StateSearch(context.Context, *StateSearchRequest) (*StateSearchResponse, error)
	// 保存state快照
	StateSnapshotSave(context.Context, *StateSnapshotSaveRequest) (*StateSnapshotSaveResponse, error)
	// 获取state快照
	StateSnapshotGet(context.Context, *StateSnapshotGetRequest) (*StateSnapshotGetResponse, error)
	// 创建数据集
	DatasetCreate(context.Context, *DatasetCreateRequest) (*DatasetCreateResponse, error)
	// 获取数据集
	DatasetGet(context.Context, *DatasetGetRequest) (*DatasetGetResponse, error)
	// 数据集列表
	DatasetList(context.Context, *DatasetListRequest) (*DatasetListResponse, error)
	// 搜索数据集
	DatasetSearch(context.Context, *DatasetSearchRequest) (*DatasetSearchResponse, error)
	// 数据集更新
	DatasetUpdate(context.Context, *DatasetUpdateRequest) (*DatasetUpdateResponse, error)
	// 删除数据集
	DatasetDelete(context.Context, *DatasetDeleteRequest) (*DatasetDeleteResponse, error)
	// 分享数据集
	DatasetShare(context.Context, *DatasetShareRequest) (*DatasetShareResponse, error)
	mustEmbedUnimplementedLabelDatasetServer()
}

// UnimplementedLabelDatasetServer must be embedded to have forward compatible implementations.
type UnimplementedLabelDatasetServer struct {
}

func (UnimplementedLabelDatasetServer) StateCreate(context.Context, *StateCreateRequest) (*StateCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateCreate not implemented")
}
func (UnimplementedLabelDatasetServer) StateGet(context.Context, *StateGetRequest) (*StateGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateGet not implemented")
}
func (UnimplementedLabelDatasetServer) StateList(context.Context, *StateListRequest) (*StateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateList not implemented")
}
func (UnimplementedLabelDatasetServer) StateUpdate(context.Context, *StateUpdateRequest) (*StateUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateUpdate not implemented")
}
func (UnimplementedLabelDatasetServer) StateDelete(context.Context, *StateDeleteRequest) (*StateDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateDelete not implemented")
}
func (UnimplementedLabelDatasetServer) StateSearch(context.Context, *StateSearchRequest) (*StateSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateSearch not implemented")
}
func (UnimplementedLabelDatasetServer) StateSnapshotSave(context.Context, *StateSnapshotSaveRequest) (*StateSnapshotSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateSnapshotSave not implemented")
}
func (UnimplementedLabelDatasetServer) StateSnapshotGet(context.Context, *StateSnapshotGetRequest) (*StateSnapshotGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateSnapshotGet not implemented")
}
func (UnimplementedLabelDatasetServer) DatasetCreate(context.Context, *DatasetCreateRequest) (*DatasetCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatasetCreate not implemented")
}
func (UnimplementedLabelDatasetServer) DatasetGet(context.Context, *DatasetGetRequest) (*DatasetGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatasetGet not implemented")
}
func (UnimplementedLabelDatasetServer) DatasetList(context.Context, *DatasetListRequest) (*DatasetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatasetList not implemented")
}
func (UnimplementedLabelDatasetServer) DatasetSearch(context.Context, *DatasetSearchRequest) (*DatasetSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatasetSearch not implemented")
}
func (UnimplementedLabelDatasetServer) DatasetUpdate(context.Context, *DatasetUpdateRequest) (*DatasetUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatasetUpdate not implemented")
}
func (UnimplementedLabelDatasetServer) DatasetDelete(context.Context, *DatasetDeleteRequest) (*DatasetDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatasetDelete not implemented")
}
func (UnimplementedLabelDatasetServer) DatasetShare(context.Context, *DatasetShareRequest) (*DatasetShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatasetShare not implemented")
}
func (UnimplementedLabelDatasetServer) mustEmbedUnimplementedLabelDatasetServer() {}

// UnsafeLabelDatasetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LabelDatasetServer will
// result in compilation errors.
type UnsafeLabelDatasetServer interface {
	mustEmbedUnimplementedLabelDatasetServer()
}

func RegisterLabelDatasetServer(s grpc.ServiceRegistrar, srv LabelDatasetServer) {
	s.RegisterService(&LabelDataset_ServiceDesc, srv)
}

func _LabelDataset_StateCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelDatasetServer).StateCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/label_dataset_srv.LabelDataset/StateCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelDatasetServer).StateCreate(ctx, req.(*StateCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelDataset_StateGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelDatasetServer).StateGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/label_dataset_srv.LabelDataset/StateGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelDatasetServer).StateGet(ctx, req.(*StateGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelDataset_StateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelDatasetServer).StateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/label_dataset_srv.LabelDataset/StateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelDatasetServer).StateList(ctx, req.(*StateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelDataset_StateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelDatasetServer).StateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/label_dataset_srv.LabelDataset/StateUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelDatasetServer).StateUpdate(ctx, req.(*StateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelDataset_StateDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelDatasetServer).StateDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/label_dataset_srv.LabelDataset/StateDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelDatasetServer).StateDelete(ctx, req.(*StateDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelDataset_StateSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelDatasetServer).StateSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/label_dataset_srv.LabelDataset/StateSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelDatasetServer).StateSearch(ctx, req.(*StateSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelDataset_StateSnapshotSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateSnapshotSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelDatasetServer).StateSnapshotSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/label_dataset_srv.LabelDataset/StateSnapshotSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelDatasetServer).StateSnapshotSave(ctx, req.(*StateSnapshotSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelDataset_StateSnapshotGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateSnapshotGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelDatasetServer).StateSnapshotGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/label_dataset_srv.LabelDataset/StateSnapshotGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelDatasetServer).StateSnapshotGet(ctx, req.(*StateSnapshotGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelDataset_DatasetCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasetCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelDatasetServer).DatasetCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/label_dataset_srv.LabelDataset/DatasetCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelDatasetServer).DatasetCreate(ctx, req.(*DatasetCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelDataset_DatasetGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasetGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelDatasetServer).DatasetGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/label_dataset_srv.LabelDataset/DatasetGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelDatasetServer).DatasetGet(ctx, req.(*DatasetGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelDataset_DatasetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelDatasetServer).DatasetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/label_dataset_srv.LabelDataset/DatasetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelDatasetServer).DatasetList(ctx, req.(*DatasetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelDataset_DatasetSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasetSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelDatasetServer).DatasetSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/label_dataset_srv.LabelDataset/DatasetSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelDatasetServer).DatasetSearch(ctx, req.(*DatasetSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelDataset_DatasetUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasetUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelDatasetServer).DatasetUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/label_dataset_srv.LabelDataset/DatasetUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelDatasetServer).DatasetUpdate(ctx, req.(*DatasetUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelDataset_DatasetDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasetDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelDatasetServer).DatasetDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/label_dataset_srv.LabelDataset/DatasetDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelDatasetServer).DatasetDelete(ctx, req.(*DatasetDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelDataset_DatasetShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasetShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelDatasetServer).DatasetShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/label_dataset_srv.LabelDataset/DatasetShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelDatasetServer).DatasetShare(ctx, req.(*DatasetShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LabelDataset_ServiceDesc is the grpc.ServiceDesc for LabelDataset service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LabelDataset_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "label_dataset_srv.LabelDataset",
	HandlerType: (*LabelDatasetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StateCreate",
			Handler:    _LabelDataset_StateCreate_Handler,
		},
		{
			MethodName: "StateGet",
			Handler:    _LabelDataset_StateGet_Handler,
		},
		{
			MethodName: "StateList",
			Handler:    _LabelDataset_StateList_Handler,
		},
		{
			MethodName: "StateUpdate",
			Handler:    _LabelDataset_StateUpdate_Handler,
		},
		{
			MethodName: "StateDelete",
			Handler:    _LabelDataset_StateDelete_Handler,
		},
		{
			MethodName: "StateSearch",
			Handler:    _LabelDataset_StateSearch_Handler,
		},
		{
			MethodName: "StateSnapshotSave",
			Handler:    _LabelDataset_StateSnapshotSave_Handler,
		},
		{
			MethodName: "StateSnapshotGet",
			Handler:    _LabelDataset_StateSnapshotGet_Handler,
		},
		{
			MethodName: "DatasetCreate",
			Handler:    _LabelDataset_DatasetCreate_Handler,
		},
		{
			MethodName: "DatasetGet",
			Handler:    _LabelDataset_DatasetGet_Handler,
		},
		{
			MethodName: "DatasetList",
			Handler:    _LabelDataset_DatasetList_Handler,
		},
		{
			MethodName: "DatasetSearch",
			Handler:    _LabelDataset_DatasetSearch_Handler,
		},
		{
			MethodName: "DatasetUpdate",
			Handler:    _LabelDataset_DatasetUpdate_Handler,
		},
		{
			MethodName: "DatasetDelete",
			Handler:    _LabelDataset_DatasetDelete_Handler,
		},
		{
			MethodName: "DatasetShare",
			Handler:    _LabelDataset_DatasetShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
